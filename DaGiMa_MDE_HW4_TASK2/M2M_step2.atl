-- @path src=/DaGiMa_MDE_HW4_TASK2/DaGiMa_MDE_HW4_intermediate.ecore
-- @path dest=/DaGiMa_MDE_HW4_TASK2/DaGiMa_MDE_HW4_dest.ecore

module M2M_step2;
create OUT : dest from IN : src;

--used to make matriculation numbers unique per transcript
helper def: counter : Integer = 0;
helper context Integer def : inc() : Integer = self + 1;
helper context Integer def : reset() : Integer = 0;

--Used to generate the call session in the examination call's description
helper def : months : Map(String, Integer) = Map{('Jan', 1), ('Feb', 2), ('Mar', 3), ('Apr', 4), ('May', 5), ('Jun', 6), ('Jul', 7), ('Aug', 8), ('Sep', 9), ('Oct', 10), ('Nov', 11), ('Dec', 12)};
helper def: get_call_group(date : String) : Boolean =
	let date_components : Sequence(String) = date.split(' ') in
		if((thisModule.months.get(date_components.first()) >= 12 
			and date_components.last().toInteger() >= 1)
			or
			(thisModule.months.get(date_components.first())  <= 2
			and date_components.last().toInteger()  <= 28)) then
				'Winter session'
		else
			if((thisModule.months.get(date_components.first()) >= 6 
				and date_components.last().toInteger() >= 1)
				and thisModule.months.get(date_components.first())  <= 9
				and date_components.last().toInteger()  <= 31) then
				'Summer session'
		else
			'Extraordinary session'
		endif
		endif;

helper  def : convertGradeToLetter(grade : String) : String =
	if(grade.size() > 0) then
		if(grade.toLower() = '30l') then
			'A+'
		else if(grade.toInteger() > 27) then
			'A'
		else if(grade.toInteger() > 23) then
			'B'
		else if(grade.toInteger() > 20) then
			'C'
		else if(grade.toInteger() > 17) then
			'D'
		else
			'F'
		endif
		endif
		endif
		endif
		endif
	else
		grade
	endif;

helper context src!Course def : getCoursePeriodElement(referringTo : String, element : String) : Integer =
	
	if(self.period = #FIRST_SEMESTER.toString()) then
		if(referringTo.toLower() = 'start') then
			if(element.toLower() = 'day') then
				1
			else if(element.toLower() = 'month') then
				9
			else
				self.degree_courses.first().reference_year - 1 + self.year
			endif
			endif
		else
			if(element.toLower() = 'day') then
				12
			else if(element.toLower() = 'month') then
				1
			else
				self.degree_courses.first().reference_year + self.year
			endif
			endif
		endif
	else -- second semester
		if(referringTo.toLower() = 'start') then
			if(element.toLower() = 'day') then
				28
			else if(element.toLower() = 'month') then
				2
			else
				self.degree_courses.first().reference_year + self.year
			endif
			endif
		else
			if(element.toLower() = 'day') then
				15
			else if(element.toLower() = 'month') then
				6
			else
				self.degree_courses.first().reference_year + self.year
			endif
			endif
		endif
	endif;

rule AddMatriculation2Career {
	from
		s : src!Career
	to
		t : dest!Career (
			matriculation_number <- (s.student.matriculation_number->toString()	+ thisModule.counter->toString()).toInteger().longValue()
		)
	do{
		thisModule.counter <- thisModule.counter.inc();
	}
}

rule ContainerTransform {
	from
		s : src!Container
	to
		t : dest!Container (
			students <- s.students,
			professors <- s.professors,
			universities <- s.universities,
			courses <- s.courses,
			custom_enumerations <- s.custom_enumerations,
			extra_infos <- s.extra_infos
			)
}
rule University {
	from 
		s : src!University
	to
		t : dest!University(
			name <- s.name,
			departments <- s.departments,
			rector <- s.rector
			)
}
abstract rule User {
	from
		s : src!User
	to
		t : dest!User(
			name <- s.name,
			surname <- s.surname,
			email <- s.email,
			telephone <- s.telephone,
			birth_date <- s.birth_date
		)
}
rule Professor extends User {
	from
		s : src!Professor
	to
		t : dest!Professor(
			office_telephone <- s.office_telephone,
			orcid <- s.orcid,
			coordinated_degree_courses <- s.coordinated_degree_courses,
			supervised_thesis <- s.supervised_thesis,
			taught_courses <- s.taught_courses,
			news_posted <- s.news_posted
			)
}
rule Student extends User {
	from
		s : src!Student
	to
		t : dest!Student(
			thesis_defended <- s.thesis_defended,
			enrolled_courses <- s.enrolled_courses,
			booked_calls <- s.booked_calls,
			transcripts <- s.transcripts
			)
	do{
		thisModule.counter <- thisModule.counter.reset();
	}
}
rule Department {
	from
		s : src!Department
	to
		t : dest!Department(
			website <- s.website,
			offered_courses <-s.offered_courses,
			university <- s.university,
			name <- s.name,
			related_news <- s.related_news
			)
}
rule DegreeCourse {
	from
		s : src!DegreeCourse
	to
		t : dest!DegreeCourse(
			code <- s.code,
			name <- s.name,
			reference_year <- s.reference_year,
			duration <- s.duration,
			cfu <- s.cfu,
			description <- s.description,
			language <- s.language,
			department <- s.department,
			coordinator <- s.coordinator,
			enrolled_students <- s.enrolled_students,
			course_catalogue <- s.course_catalogue

			)
}
rule Thesis {
	from
		s : src!Thesis
	to
		t : dest!Thesis(
			title <- s.title,
			type <- s.type,
			student <- s.student,
			supervisor <- s.supervisor,
			degree_course <- s.degree_course
			)
}
rule Course {
	from
		s : src!Course
	to
		t : dest!Course(
			code <- s.code,
			name <- s.name,
			language <- s.language,
			cfu <- s.cfu,
			credit_type <- s.credit_type,
			year <- s.year,
			teachers <- s.teachers,
			degree_courses <- s.degree_courses,
			calls <- s.calls,
			students_grades <- s.students_grades,
			teaching_period_start_day <- s.getCoursePeriodElement('start', 'day'),
			teaching_period_start_month <- s.getCoursePeriodElement('start', 'month'),
			teaching_period_start_year <- s.getCoursePeriodElement('start', 'year'),
			teaching_period_end_day <- s.getCoursePeriodElement('end', 'day'),
			teaching_period_end_month <- s.getCoursePeriodElement('end', 'month'),
			teaching_period_end_year <- s.getCoursePeriodElement('end', 'year')
		)
}

rule ExaminationCall {
	from
		s : src!ExaminationCall
	to
		t : dest!ExaminationCall(
			date <- s.date,
			classroom <- s.classroom,
			type <- s.type,
			description <- s.description + ' (' + thisModule.get_call_group(s.date.toString().substring(5, 10)) + ')',
			course <- s.course,
			booked_students <- s.booked_students
			)
}
rule PassingGrade {
	from
		s : src!PassingGrade
	to
		t : dest!PassingGrade(
			date <- s.date,
			grade <- thisModule.convertGradeToLetter(s.grade),
			course <- s.course,
			student <- s.student
			)
}
rule News {
	from
		s : src!News
	to
		t : dest!News(
			title <- s.title,
            publication_date <- s.publication_date,
            department <- s.department,
            author <- s.author,
            body <- s.body
			)
}
rule ExtraInfo {
	from 
		s : src!ExtraInfo
	to
		t : dest!ExtraInfo(
			name <- s.name,
			value <- s.value,
			type <- s.type,
			lower_multiplicity <- s.lower_multiplicity,
			higher_multiplicity <- s.higher_multiplicity,
			enum <- s.enum
		)
}
rule CustomEnumeration {
	from 
		s : src!CustomEnumeration
	to
		t : dest!CustomEnumeration(
			name <- s.name,
			values <- s.values
		)
}